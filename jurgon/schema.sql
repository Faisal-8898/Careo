-- =====================================================
-- Careo Healthcare Patient Management System
-- Database Schema with Provenance Tracking
-- =====================================================

-- Drop existing tables if they exist (for clean setup)
DROP TABLE AUDIT_PRESCRIPTIONS CASCADE CONSTRAINTS;
DROP TABLE AUDIT_MEDICAL_RECORDS CASCADE CONSTRAINTS;
DROP TABLE AUDIT_APPOINTMENTS CASCADE CONSTRAINTS;
DROP TABLE AUDIT_DOCTORS CASCADE CONSTRAINTS;
DROP TABLE AUDIT_PATIENTS CASCADE CONSTRAINTS;
DROP TABLE PRESCRIPTIONS CASCADE CONSTRAINTS;
DROP TABLE MEDICAL_RECORDS CASCADE CONSTRAINTS;
DROP TABLE APPOINTMENTS CASCADE CONSTRAINTS;
DROP TABLE MEDICATIONS CASCADE CONSTRAINTS;
DROP TABLE DOCTORS CASCADE CONSTRAINTS;
DROP TABLE DEPARTMENTS CASCADE CONSTRAINTS;
DROP TABLE PATIENTS CASCADE CONSTRAINTS;

-- Drop sequences
DROP SEQUENCE SEQ_PATIENT_ID;
DROP SEQUENCE SEQ_DOCTOR_ID;
DROP SEQUENCE SEQ_DEPARTMENT_ID;
DROP SEQUENCE SEQ_APPOINTMENT_ID;
DROP SEQUENCE SEQ_MEDICAL_RECORD_ID;
DROP SEQUENCE SEQ_MEDICATION_ID;
DROP SEQUENCE SEQ_PRESCRIPTION_ID;
DROP SEQUENCE SEQ_AUDIT_ID;

-- =====================================================
-- SEQUENCES
-- =====================================================

CREATE SEQUENCE SEQ_PATIENT_ID START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SEQ_DOCTOR_ID START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SEQ_DEPARTMENT_ID START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SEQ_APPOINTMENT_ID START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SEQ_MEDICAL_RECORD_ID START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SEQ_MEDICATION_ID START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SEQ_PRESCRIPTION_ID START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SEQ_AUDIT_ID START WITH 1 INCREMENT BY 1;

-- =====================================================
-- CORE TABLES
-- =====================================================

-- Departments table
CREATE TABLE DEPARTMENTS (
    DEPARTMENT_ID NUMBER PRIMARY KEY,
    NAME VARCHAR2(100) NOT NULL,
    LOCATION VARCHAR2(200),
    HEAD_DOCTOR_ID NUMBER,
    CREATED_DATE TIMESTAMP DEFAULT SYSTIMESTAMP,
    UPDATED_DATE TIMESTAMP DEFAULT SYSTIMESTAMP
);

-- Doctors table
CREATE TABLE DOCTORS (
    DOCTOR_ID NUMBER PRIMARY KEY,
    NAME VARCHAR2(100) NOT NULL,
    SPECIALIZATION VARCHAR2(100),
    LICENSE_NUMBER VARCHAR2(50) UNIQUE,
    DEPARTMENT_ID NUMBER,
    EMAIL VARCHAR2(100),
    PHONE VARCHAR2(20),
    CREATED_DATE TIMESTAMP DEFAULT SYSTIMESTAMP,
    UPDATED_DATE TIMESTAMP DEFAULT SYSTIMESTAMP,
    CONSTRAINT FK_DOCTORS_DEPARTMENT FOREIGN KEY (DEPARTMENT_ID) REFERENCES DEPARTMENTS(DEPARTMENT_ID)
);

-- Patients table
CREATE TABLE PATIENTS (
    PATIENT_ID NUMBER PRIMARY KEY,
    NAME VARCHAR2(100) NOT NULL,
    DATE_OF_BIRTH DATE,
    GENDER VARCHAR2(10),
    EMAIL VARCHAR2(100),
    PHONE VARCHAR2(20),
    ADDRESS VARCHAR2(500),
    EMERGENCY_CONTACT VARCHAR2(100),
    EMERGENCY_PHONE VARCHAR2(20),
    INSURANCE_NUMBER VARCHAR2(50),
    CREATED_DATE TIMESTAMP DEFAULT SYSTIMESTAMP,
    UPDATED_DATE TIMESTAMP DEFAULT SYSTIMESTAMP
);

-- Medications table
CREATE TABLE MEDICATIONS (
    MEDICATION_ID NUMBER PRIMARY KEY,
    NAME VARCHAR2(100) NOT NULL,
    GENERIC_NAME VARCHAR2(100),
    DOSAGE_FORM VARCHAR2(50),
    STRENGTH VARCHAR2(50),
    MANUFACTURER VARCHAR2(100),
    PRICE NUMBER(10,2),
    IS_ACTIVE NUMBER(1) DEFAULT 1,
    CREATED_DATE TIMESTAMP DEFAULT SYSTIMESTAMP,
    UPDATED_DATE TIMESTAMP DEFAULT SYSTIMESTAMP
);

-- Appointments table
CREATE TABLE APPOINTMENTS (
    APPOINTMENT_ID NUMBER PRIMARY KEY,
    PATIENT_ID NUMBER NOT NULL,
    DOCTOR_ID NUMBER NOT NULL,
    APPOINTMENT_DATE DATE NOT NULL,
    APPOINTMENT_TIME VARCHAR2(10),
    STATUS VARCHAR2(20) DEFAULT 'SCHEDULED',
    NOTES VARCHAR2(1000),
    CREATED_DATE TIMESTAMP DEFAULT SYSTIMESTAMP,
    UPDATED_DATE TIMESTAMP DEFAULT SYSTIMESTAMP,
    CONSTRAINT FK_APPOINTMENTS_PATIENT FOREIGN KEY (PATIENT_ID) REFERENCES PATIENTS(PATIENT_ID),
    CONSTRAINT FK_APPOINTMENTS_DOCTOR FOREIGN KEY (DOCTOR_ID) REFERENCES DOCTORS(DOCTOR_ID)
);

-- Medical Records table
CREATE TABLE MEDICAL_RECORDS (
    RECORD_ID NUMBER PRIMARY KEY,
    PATIENT_ID NUMBER NOT NULL,
    DOCTOR_ID NUMBER NOT NULL,
    VISIT_DATE DATE NOT NULL,
    SYMPTOMS VARCHAR2(1000),
    DIAGNOSIS VARCHAR2(500),
    TREATMENT_PLAN VARCHAR2(1000),
    PRESCRIPTION_NOTES VARCHAR2(1000),
    CREATED_DATE TIMESTAMP DEFAULT SYSTIMESTAMP,
    UPDATED_DATE TIMESTAMP DEFAULT SYSTIMESTAMP,
    CONSTRAINT FK_MEDICAL_RECORDS_PATIENT FOREIGN KEY (PATIENT_ID) REFERENCES PATIENTS(PATIENT_ID),
    CONSTRAINT FK_MEDICAL_RECORDS_DOCTOR FOREIGN KEY (DOCTOR_ID) REFERENCES DOCTORS(DOCTOR_ID)
);

-- Prescriptions table
CREATE TABLE PRESCRIPTIONS (
    PRESCRIPTION_ID NUMBER PRIMARY KEY,
    PATIENT_ID NUMBER NOT NULL,
    DOCTOR_ID NUMBER NOT NULL,
    MEDICATION_ID NUMBER NOT NULL,
    DOSAGE VARCHAR2(50) NOT NULL,
    FREQUENCY VARCHAR2(100) NOT NULL,
    DURATION VARCHAR2(100),
    START_DATE DATE,
    END_DATE DATE,
    STATUS VARCHAR2(20) DEFAULT 'ACTIVE',
    NOTES VARCHAR2(1000),
    CREATED_DATE TIMESTAMP DEFAULT SYSTIMESTAMP,
    UPDATED_DATE TIMESTAMP DEFAULT SYSTIMESTAMP,
    CONSTRAINT FK_PRESCRIPTIONS_PATIENT FOREIGN KEY (PATIENT_ID) REFERENCES PATIENTS(PATIENT_ID),
    CONSTRAINT FK_PRESCRIPTIONS_DOCTOR FOREIGN KEY (DOCTOR_ID) REFERENCES DOCTORS(DOCTOR_ID),
    CONSTRAINT FK_PRESCRIPTIONS_MEDICATION FOREIGN KEY (MEDICATION_ID) REFERENCES MEDICATIONS(MEDICATION_ID)
);

-- =====================================================
-- AUDIT TABLES FOR PROVENANCE TRACKING
-- =====================================================

-- Audit table for Patients
CREATE TABLE AUDIT_PATIENTS (
    AUDIT_ID NUMBER PRIMARY KEY,
    PATIENT_ID NUMBER NOT NULL,
    OLD_NAME VARCHAR2(100),
    NEW_NAME VARCHAR2(100),
    OLD_EMAIL VARCHAR2(100),
    NEW_EMAIL VARCHAR2(100),
    OLD_PHONE VARCHAR2(20),
    NEW_PHONE VARCHAR2(20),
    OLD_ADDRESS VARCHAR2(500),
    NEW_ADDRESS VARCHAR2(500),
    OLD_INSURANCE_NUMBER VARCHAR2(50),
    NEW_INSURANCE_NUMBER VARCHAR2(50),
    OPERATION_TYPE VARCHAR2(10) NOT NULL, -- INSERT, UPDATE, DELETE
    TIMESTAMP TIMESTAMP DEFAULT SYSTIMESTAMP,
    USER_ID VARCHAR2(50),
    REASON VARCHAR2(500),
    CONSTRAINT FK_AUDIT_PATIENTS_PATIENT FOREIGN KEY (PATIENT_ID) REFERENCES PATIENTS(PATIENT_ID)
);

-- Audit table for Doctors
CREATE TABLE AUDIT_DOCTORS (
    AUDIT_ID NUMBER PRIMARY KEY,
    DOCTOR_ID NUMBER NOT NULL,
    OLD_NAME VARCHAR2(100),
    NEW_NAME VARCHAR2(100),
    OLD_SPECIALIZATION VARCHAR2(100),
    NEW_SPECIALIZATION VARCHAR2(100),
    OLD_DEPARTMENT_ID NUMBER,
    NEW_DEPARTMENT_ID NUMBER,
    OLD_EMAIL VARCHAR2(100),
    NEW_EMAIL VARCHAR2(100),
    OLD_PHONE VARCHAR2(20),
    NEW_PHONE VARCHAR2(20),
    OPERATION_TYPE VARCHAR2(10) NOT NULL,
    TIMESTAMP TIMESTAMP DEFAULT SYSTIMESTAMP,
    USER_ID VARCHAR2(50),
    REASON VARCHAR2(500),
    CONSTRAINT FK_AUDIT_DOCTORS_DOCTOR FOREIGN KEY (DOCTOR_ID) REFERENCES DOCTORS(DOCTOR_ID),
    CONSTRAINT FK_AUDIT_DOCTORS_OLD_DEPT FOREIGN KEY (OLD_DEPARTMENT_ID) REFERENCES DEPARTMENTS(DEPARTMENT_ID),
    CONSTRAINT FK_AUDIT_DOCTORS_NEW_DEPT FOREIGN KEY (NEW_DEPARTMENT_ID) REFERENCES DEPARTMENTS(DEPARTMENT_ID)
);

-- Audit table for Appointments
CREATE TABLE AUDIT_APPOINTMENTS (
    AUDIT_ID NUMBER PRIMARY KEY,
    APPOINTMENT_ID NUMBER NOT NULL,
    OLD_PATIENT_ID NUMBER,
    NEW_PATIENT_ID NUMBER,
    OLD_DOCTOR_ID NUMBER,
    NEW_DOCTOR_ID NUMBER,
    OLD_APPOINTMENT_DATE DATE,
    NEW_APPOINTMENT_DATE DATE,
    OLD_APPOINTMENT_TIME VARCHAR2(10),
    NEW_APPOINTMENT_TIME VARCHAR2(10),
    OLD_STATUS VARCHAR2(20),
    NEW_STATUS VARCHAR2(20),
    OLD_NOTES VARCHAR2(1000),
    NEW_NOTES VARCHAR2(1000),
    OPERATION_TYPE VARCHAR2(10) NOT NULL,
    TIMESTAMP TIMESTAMP DEFAULT SYSTIMESTAMP,
    USER_ID VARCHAR2(50),
    REASON VARCHAR2(500),
    CONSTRAINT FK_AUDIT_APPOINTMENTS_APPOINTMENT FOREIGN KEY (APPOINTMENT_ID) REFERENCES APPOINTMENTS(APPOINTMENT_ID),
    CONSTRAINT FK_AUDIT_APPOINTMENTS_OLD_PATIENT FOREIGN KEY (OLD_PATIENT_ID) REFERENCES PATIENTS(PATIENT_ID),
    CONSTRAINT FK_AUDIT_APPOINTMENTS_NEW_PATIENT FOREIGN KEY (NEW_PATIENT_ID) REFERENCES PATIENTS(PATIENT_ID),
    CONSTRAINT FK_AUDIT_APPOINTMENTS_OLD_DOCTOR FOREIGN KEY (OLD_DOCTOR_ID) REFERENCES DOCTORS(DOCTOR_ID),
    CONSTRAINT FK_AUDIT_APPOINTMENTS_NEW_DOCTOR FOREIGN KEY (NEW_DOCTOR_ID) REFERENCES DOCTORS(DOCTOR_ID)
);

-- Audit table for Medical Records
CREATE TABLE AUDIT_MEDICAL_RECORDS (
    AUDIT_ID NUMBER PRIMARY KEY,
    RECORD_ID NUMBER NOT NULL,
    OLD_DIAGNOSIS VARCHAR2(500),
    NEW_DIAGNOSIS VARCHAR2(500),
    OLD_TREATMENT_PLAN VARCHAR2(1000),
    NEW_TREATMENT_PLAN VARCHAR2(1000),
    OLD_SYMPTOMS VARCHAR2(1000),
    NEW_SYMPTOMS VARCHAR2(1000),
    OLD_PRESCRIPTION_NOTES VARCHAR2(1000),
    NEW_PRESCRIPTION_NOTES VARCHAR2(1000),
    OPERATION_TYPE VARCHAR2(10) NOT NULL,
    TIMESTAMP TIMESTAMP DEFAULT SYSTIMESTAMP,
    USER_ID VARCHAR2(50),
    REASON VARCHAR2(500),
    CONSTRAINT FK_AUDIT_MEDICAL_RECORDS_RECORD FOREIGN KEY (RECORD_ID) REFERENCES MEDICAL_RECORDS(RECORD_ID)
);

-- Audit table for Prescriptions
CREATE TABLE AUDIT_PRESCRIPTIONS (
    AUDIT_ID NUMBER PRIMARY KEY,
    PRESCRIPTION_ID NUMBER NOT NULL,
    OLD_DOSAGE VARCHAR2(50),
    NEW_DOSAGE VARCHAR2(50),
    OLD_FREQUENCY VARCHAR2(100),
    NEW_FREQUENCY VARCHAR2(100),
    OLD_DURATION VARCHAR2(100),
    NEW_DURATION VARCHAR2(100),
    OLD_STATUS VARCHAR2(20),
    NEW_STATUS VARCHAR2(20),
    OLD_NOTES VARCHAR2(1000),
    NEW_NOTES VARCHAR2(1000),
    OPERATION_TYPE VARCHAR2(10) NOT NULL,
    TIMESTAMP TIMESTAMP DEFAULT SYSTIMESTAMP,
    USER_ID VARCHAR2(50),
    REASON VARCHAR2(500),
    CONSTRAINT FK_AUDIT_PRESCRIPTIONS_PRESCRIPTION FOREIGN KEY (PRESCRIPTION_ID) REFERENCES PRESCRIPTIONS(PRESCRIPTION_ID)
);

-- =====================================================
-- TRIGGERS FOR AUTOMATIC AUDIT LOGGING
-- =====================================================

-- Trigger for Patients table
CREATE OR REPLACE TRIGGER TRG_AUDIT_PATIENTS
AFTER INSERT OR UPDATE OR DELETE ON PATIENTS
FOR EACH ROW
DECLARE
    v_operation_type VARCHAR2(10);
    v_user_id VARCHAR2(50);
BEGIN
    -- Determine operation type
    IF INSERTING THEN
        v_operation_type := 'INSERT';
    ELSIF UPDATING THEN
        v_operation_type := 'UPDATE';
    ELSIF DELETING THEN
        v_operation_type := 'DELETE';
    END IF;
    
    -- Get current user (you can modify this based on your authentication system)
    v_user_id := USER;
    
    -- Insert audit record
    INSERT INTO AUDIT_PATIENTS (
        AUDIT_ID, PATIENT_ID, OLD_NAME, NEW_NAME, OLD_EMAIL, NEW_EMAIL,
        OLD_PHONE, NEW_PHONE, OLD_ADDRESS, NEW_ADDRESS,
        OLD_INSURANCE_NUMBER, NEW_INSURANCE_NUMBER,
        OPERATION_TYPE, USER_ID
    ) VALUES (
        SEQ_AUDIT_ID.NEXTVAL,
        NVL(:NEW.PATIENT_ID, :OLD.PATIENT_ID),
        :OLD.NAME, :NEW.NAME,
        :OLD.EMAIL, :NEW.EMAIL,
        :OLD.PHONE, :NEW.PHONE,
        :OLD.ADDRESS, :NEW.ADDRESS,
        :OLD.INSURANCE_NUMBER, :NEW.INSURANCE_NUMBER,
        v_operation_type, v_user_id
    );
END;
/

-- Trigger for Doctors table
CREATE OR REPLACE TRIGGER TRG_AUDIT_DOCTORS
AFTER INSERT OR UPDATE OR DELETE ON DOCTORS
FOR EACH ROW
DECLARE
    v_operation_type VARCHAR2(10);
    v_user_id VARCHAR2(50);
BEGIN
    IF INSERTING THEN
        v_operation_type := 'INSERT';
    ELSIF UPDATING THEN
        v_operation_type := 'UPDATE';
    ELSIF DELETING THEN
        v_operation_type := 'DELETE';
    END IF;
    
    v_user_id := USER;
    
    INSERT INTO AUDIT_DOCTORS (
        AUDIT_ID, DOCTOR_ID, OLD_NAME, NEW_NAME, OLD_SPECIALIZATION, NEW_SPECIALIZATION,
        OLD_DEPARTMENT_ID, NEW_DEPARTMENT_ID, OLD_EMAIL, NEW_EMAIL,
        OLD_PHONE, NEW_PHONE, OPERATION_TYPE, USER_ID
    ) VALUES (
        SEQ_AUDIT_ID.NEXTVAL,
        NVL(:NEW.DOCTOR_ID, :OLD.DOCTOR_ID),
        :OLD.NAME, :NEW.NAME,
        :OLD.SPECIALIZATION, :NEW.SPECIALIZATION,
        :OLD.DEPARTMENT_ID, :NEW.DEPARTMENT_ID,
        :OLD.EMAIL, :NEW.EMAIL,
        :OLD.PHONE, :NEW.PHONE,
        v_operation_type, v_user_id
    );
END;
/

-- Trigger for Appointments table
CREATE OR REPLACE TRIGGER TRG_AUDIT_APPOINTMENTS
AFTER INSERT OR UPDATE OR DELETE ON APPOINTMENTS
FOR EACH ROW
DECLARE
    v_operation_type VARCHAR2(10);
    v_user_id VARCHAR2(50);
BEGIN
    IF INSERTING THEN
        v_operation_type := 'INSERT';
    ELSIF UPDATING THEN
        v_operation_type := 'UPDATE';
    ELSIF DELETING THEN
        v_operation_type := 'DELETE';
    END IF;
    
    v_user_id := USER;
    
    INSERT INTO AUDIT_APPOINTMENTS (
        AUDIT_ID, APPOINTMENT_ID, OLD_PATIENT_ID, NEW_PATIENT_ID,
        OLD_DOCTOR_ID, NEW_DOCTOR_ID, OLD_APPOINTMENT_DATE, NEW_APPOINTMENT_DATE,
        OLD_APPOINTMENT_TIME, NEW_APPOINTMENT_TIME, OLD_STATUS, NEW_STATUS,
        OLD_NOTES, NEW_NOTES, OPERATION_TYPE, USER_ID
    ) VALUES (
        SEQ_AUDIT_ID.NEXTVAL,
        NVL(:NEW.APPOINTMENT_ID, :OLD.APPOINTMENT_ID),
        :OLD.PATIENT_ID, :NEW.PATIENT_ID,
        :OLD.DOCTOR_ID, :NEW.DOCTOR_ID,
        :OLD.APPOINTMENT_DATE, :NEW.APPOINTMENT_DATE,
        :OLD.APPOINTMENT_TIME, :NEW.APPOINTMENT_TIME,
        :OLD.STATUS, :NEW.STATUS,
        :OLD.NOTES, :NEW.NOTES,
        v_operation_type, v_user_id
    );
END;
/

-- Trigger for Medical Records table
CREATE OR REPLACE TRIGGER TRG_AUDIT_MEDICAL_RECORDS
AFTER INSERT OR UPDATE OR DELETE ON MEDICAL_RECORDS
FOR EACH ROW
DECLARE
    v_operation_type VARCHAR2(10);
    v_user_id VARCHAR2(50);
BEGIN
    IF INSERTING THEN
        v_operation_type := 'INSERT';
    ELSIF UPDATING THEN
        v_operation_type := 'UPDATE';
    ELSIF DELETING THEN
        v_operation_type := 'DELETE';
    END IF;
    
    v_user_id := USER;
    
    INSERT INTO AUDIT_MEDICAL_RECORDS (
        AUDIT_ID, RECORD_ID, OLD_DIAGNOSIS, NEW_DIAGNOSIS,
        OLD_TREATMENT_PLAN, NEW_TREATMENT_PLAN, OLD_SYMPTOMS, NEW_SYMPTOMS,
        OLD_PRESCRIPTION_NOTES, NEW_PRESCRIPTION_NOTES,
        OPERATION_TYPE, USER_ID
    ) VALUES (
        SEQ_AUDIT_ID.NEXTVAL,
        NVL(:NEW.RECORD_ID, :OLD.RECORD_ID),
        :OLD.DIAGNOSIS, :NEW.DIAGNOSIS,
        :OLD.TREATMENT_PLAN, :NEW.TREATMENT_PLAN,
        :OLD.SYMPTOMS, :NEW.SYMPTOMS,
        :OLD.PRESCRIPTION_NOTES, :NEW.PRESCRIPTION_NOTES,
        v_operation_type, v_user_id
    );
END;
/

-- Trigger for Prescriptions table
CREATE OR REPLACE TRIGGER TRG_AUDIT_PRESCRIPTIONS
AFTER INSERT OR UPDATE OR DELETE ON PRESCRIPTIONS
FOR EACH ROW
DECLARE
    v_operation_type VARCHAR2(10);
    v_user_id VARCHAR2(50);
BEGIN
    IF INSERTING THEN
        v_operation_type := 'INSERT';
    ELSIF UPDATING THEN
        v_operation_type := 'UPDATE';
    ELSIF DELETING THEN
        v_operation_type := 'DELETE';
    END IF;
    
    v_user_id := USER;
    
    INSERT INTO AUDIT_PRESCRIPTIONS (
        AUDIT_ID, PRESCRIPTION_ID, OLD_DOSAGE, NEW_DOSAGE,
        OLD_FREQUENCY, NEW_FREQUENCY, OLD_DURATION, NEW_DURATION,
        OLD_STATUS, NEW_STATUS, OLD_NOTES, NEW_NOTES,
        OPERATION_TYPE, USER_ID
    ) VALUES (
        SEQ_AUDIT_ID.NEXTVAL,
        NVL(:NEW.PRESCRIPTION_ID, :OLD.PRESCRIPTION_ID),
        :OLD.DOSAGE, :NEW.DOSAGE,
        :OLD.FREQUENCY, :NEW.FREQUENCY,
        :OLD.DURATION, :NEW.DURATION,
        :OLD.STATUS, :NEW.STATUS,
        :OLD.NOTES, :NEW.NOTES,
        v_operation_type, v_user_id
    );
END;
/

-- =====================================================
-- SAMPLE DATA INSERTION
-- =====================================================

-- Insert Departments
INSERT INTO DEPARTMENTS (DEPARTMENT_ID, NAME, LOCATION) VALUES (SEQ_DEPARTMENT_ID.NEXTVAL, 'Cardiology', 'Floor 1, Wing A');
INSERT INTO DEPARTMENTS (DEPARTMENT_ID, NAME, LOCATION) VALUES (SEQ_DEPARTMENT_ID.NEXTVAL, 'Neurology', 'Floor 2, Wing B');
INSERT INTO DEPARTMENTS (DEPARTMENT_ID, NAME, LOCATION) VALUES (SEQ_DEPARTMENT_ID.NEXTVAL, 'Pediatrics', 'Floor 1, Wing C');
INSERT INTO DEPARTMENTS (DEPARTMENT_ID, NAME, LOCATION) VALUES (SEQ_DEPARTMENT_ID.NEXTVAL, 'Emergency Medicine', 'Ground Floor');

-- Insert Doctors
INSERT INTO DOCTORS (DOCTOR_ID, NAME, SPECIALIZATION, LICENSE_NUMBER, DEPARTMENT_ID, EMAIL, PHONE) 
VALUES (SEQ_DOCTOR_ID.NEXTVAL, 'Dr. Sarah Johnson', 'Cardiologist', 'CARD001', 1, 'sarah.johnson@careo.com', '555-0101');

INSERT INTO DOCTORS (DOCTOR_ID, NAME, SPECIALIZATION, LICENSE_NUMBER, DEPARTMENT_ID, EMAIL, PHONE) 
VALUES (SEQ_DOCTOR_ID.NEXTVAL, 'Dr. Michael Chen', 'Neurologist', 'NEURO001', 2, 'michael.chen@careo.com', '555-0102');

INSERT INTO DOCTORS (DOCTOR_ID, NAME, SPECIALIZATION, LICENSE_NUMBER, DEPARTMENT_ID, EMAIL, PHONE) 
VALUES (SEQ_DOCTOR_ID.NEXTVAL, 'Dr. Emily Davis', 'Pediatrician', 'PED001', 3, 'emily.davis@careo.com', '555-0103');

INSERT INTO DOCTORS (DOCTOR_ID, NAME, SPECIALIZATION, LICENSE_NUMBER, DEPARTMENT_ID, EMAIL, PHONE) 
VALUES (SEQ_DOCTOR_ID.NEXTVAL, 'Dr. Robert Wilson', 'Emergency Medicine', 'EM001', 4, 'robert.wilson@careo.com', '555-0104');

-- Insert Patients
INSERT INTO PATIENTS (PATIENT_ID, NAME, DATE_OF_BIRTH, GENDER, EMAIL, PHONE, ADDRESS, EMERGENCY_CONTACT, EMERGENCY_PHONE, INSURANCE_NUMBER) 
VALUES (SEQ_PATIENT_ID.NEXTVAL, 'John Smith', DATE '1985-03-15', 'Male', 'john.smith@email.com', '555-0201', '123 Main St, City', 'Jane Smith', '555-0202', 'INS001');

INSERT INTO PATIENTS (PATIENT_ID, NAME, DATE_OF_BIRTH, GENDER, EMAIL, PHONE, ADDRESS, EMERGENCY_CONTACT, EMERGENCY_PHONE, INSURANCE_NUMBER) 
VALUES (SEQ_PATIENT_ID.NEXTVAL, 'Maria Garcia', DATE '1990-07-22', 'Female', 'maria.garcia@email.com', '555-0203', '456 Oak Ave, City', 'Carlos Garcia', '555-0204', 'INS002');

INSERT INTO PATIENTS (PATIENT_ID, NAME, DATE_OF_BIRTH, GENDER, EMAIL, PHONE, ADDRESS, EMERGENCY_CONTACT, EMERGENCY_PHONE, INSURANCE_NUMBER) 
VALUES (SEQ_PATIENT_ID.NEXTVAL, 'David Brown', DATE '1978-11-08', 'Male', 'david.brown@email.com', '555-0205', '789 Pine Rd, City', 'Lisa Brown', '555-0206', 'INS003');

-- Insert Medications
INSERT INTO MEDICATIONS (MEDICATION_ID, NAME, GENERIC_NAME, DOSAGE_FORM, STRENGTH, MANUFACTURER, PRICE) 
VALUES (SEQ_MEDICATION_ID.NEXTVAL, 'Lisinopril', 'Lisinopril', 'Tablet', '10mg', 'Generic Pharma', 15.50);

INSERT INTO MEDICATIONS (MEDICATION_ID, NAME, GENERIC_NAME, DOSAGE_FORM, STRENGTH, MANUFACTURER, PRICE) 
VALUES (SEQ_MEDICATION_ID.NEXTVAL, 'Metformin', 'Metformin', 'Tablet', '500mg', 'Generic Pharma', 12.75);

INSERT INTO MEDICATIONS (MEDICATION_ID, NAME, GENERIC_NAME, DOSAGE_FORM, STRENGTH, MANUFACTURER, PRICE) 
VALUES (SEQ_MEDICATION_ID.NEXTVAL, 'Ibuprofen', 'Ibuprofen', 'Tablet', '400mg', 'Generic Pharma', 8.25);

-- Insert Appointments
INSERT INTO APPOINTMENTS (APPOINTMENT_ID, PATIENT_ID, DOCTOR_ID, APPOINTMENT_DATE, APPOINTMENT_TIME, STATUS, NOTES) 
VALUES (SEQ_APPOINTMENT_ID.NEXTVAL, 1, 1, DATE '2024-01-15', '09:00', 'COMPLETED', 'Regular checkup');

INSERT INTO APPOINTMENTS (APPOINTMENT_ID, PATIENT_ID, DOCTOR_ID, APPOINTMENT_DATE, APPOINTMENT_TIME, STATUS, NOTES) 
VALUES (SEQ_APPOINTMENT_ID.NEXTVAL, 2, 2, DATE '2024-01-16', '14:30', 'SCHEDULED', 'Neurological consultation');

INSERT INTO APPOINTMENTS (APPOINTMENT_ID, PATIENT_ID, DOCTOR_ID, APPOINTMENT_DATE, APPOINTMENT_TIME, STATUS, NOTES) 
VALUES (SEQ_APPOINTMENT_ID.NEXTVAL, 3, 1, DATE '2024-01-17', '10:15', 'SCHEDULED', 'Cardiac evaluation');

-- Insert Medical Records
INSERT INTO MEDICAL_RECORDS (RECORD_ID, PATIENT_ID, DOCTOR_ID, VISIT_DATE, SYMPTOMS, DIAGNOSIS, TREATMENT_PLAN, PRESCRIPTION_NOTES) 
VALUES (SEQ_MEDICAL_RECORD_ID.NEXTVAL, 1, 1, DATE '2024-01-15', 'Chest pain, shortness of breath', 'Hypertension', 'Lifestyle modifications, medication', 'Prescribed Lisinopril 10mg daily');

INSERT INTO MEDICAL_RECORDS (RECORD_ID, PATIENT_ID, DOCTOR_ID, VISIT_DATE, SYMPTOMS, DIAGNOSIS, TREATMENT_PLAN, PRESCRIPTION_NOTES) 
VALUES (SEQ_MEDICAL_RECORD_ID.NEXTVAL, 2, 2, DATE '2024-01-10', 'Headaches, dizziness', 'Migraine', 'Pain management, stress reduction', 'Prescribed pain relievers as needed');

-- Insert Prescriptions
INSERT INTO PRESCRIPTIONS (PRESCRIPTION_ID, PATIENT_ID, DOCTOR_ID, MEDICATION_ID, DOSAGE, FREQUENCY, DURATION, START_DATE, END_DATE, STATUS, NOTES) 
VALUES (SEQ_PRESCRIPTION_ID.NEXTVAL, 1, 1, 1, '10mg', 'Once daily', '30 days', DATE '2024-01-15', DATE '2024-02-15', 'ACTIVE', 'Take in the morning');

INSERT INTO PRESCRIPTIONS (PRESCRIPTION_ID, PATIENT_ID, DOCTOR_ID, MEDICATION_ID, DOSAGE, FREQUENCY, DURATION, START_DATE, END_DATE, STATUS, NOTES) 
VALUES (SEQ_PRESCRIPTION_ID.NEXTVAL, 2, 2, 3, '400mg', 'As needed', '7 days', DATE '2024-01-10', DATE '2024-01-17', 'ACTIVE', 'Take with food');

-- Update department head doctors
UPDATE DEPARTMENTS SET HEAD_DOCTOR_ID = 1 WHERE DEPARTMENT_ID = 1;
UPDATE DEPARTMENTS SET HEAD_DOCTOR_ID = 2 WHERE DEPARTMENT_ID = 2;
UPDATE DEPARTMENTS SET HEAD_DOCTOR_ID = 3 WHERE DEPARTMENT_ID = 3;
UPDATE DEPARTMENTS SET HEAD_DOCTOR_ID = 4 WHERE DEPARTMENT_ID = 4;

-- Commit all changes
COMMIT;

-- Display success message
PROMPT =====================================================
PROMPT Careo Database Schema Created Successfully!
PROMPT =====================================================
PROMPT 
PROMPT Core Tables Created:
PROMPT - PATIENTS, DOCTORS, DEPARTMENTS, APPOINTMENTS
PROMPT - MEDICAL_RECORDS, MEDICATIONS, PRESCRIPTIONS
PROMPT 
PROMPT Audit Tables Created:
PROMPT - AUDIT_PATIENTS, AUDIT_DOCTORS, AUDIT_APPOINTMENTS
PROMPT - AUDIT_MEDICAL_RECORDS, AUDIT_PRESCRIPTIONS
PROMPT 
PROMPT Triggers Created:
PROMPT - Automatic audit logging for all core tables
PROMPT 
PROMPT Sample Data Inserted:
PROMPT - 4 Departments, 4 Doctors, 3 Patients
PROMPT - 3 Medications, 3 Appointments, 2 Medical Records
PROMPT - 2 Prescriptions
PROMPT 
PROMPT Provenance Queries Available:
PROMPT - Why-Provenance: Medication dosage changes
PROMPT - Where-Provenance: User action tracking
PROMPT - How-Provenance: Status transition history
PROMPT 
PROMPT Database is ready for Careo application!
PROMPT =====================================================
